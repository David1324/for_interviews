#include <iostream>
#include <map>
#include <string>
#include <utility> 
using namespace std;

int binary_search(int* arr, int size, int value)
{
	int first = 0;
	int last = size-1;
	int i;
	int former_i = -1;

	while (first < last)
	{
			i=(first+last)/2;
			if (i==former_i)
			{
				if (i==first) i=last;
				else i=first;
			}
			if (arr[i]==value) return i;
			else if (arr[i] < value) first = i;
			else last = i;

			former_i = i;
	}

	return -1;
}

void swap(int& a, int& b)
{
	a = a+b;
	b = a-b;
	a = a-b;
}

int bits_set[256] =
{
	0, /*00000000*/ /*0*/
	1, /*00000001*/ /*1*/
	1, /*00000010*/ /*2*/
	2, /*00000011*/ /*3*/
	1, /*00000100*/ /*4*/
	2, /*00000101*/ /*5*/
	2, /*00000110*/ /*6*/
	3, /*00000111*/ /*7*/
	1, /*00001000*/ /*8*/
	2, /*00001001*/ /*9*/
	2, /*00001010*/ /*10*/
	3, /*00001011*/ /*11*/
	2, /*00001100*/ /*12*/
	3, /*00001101*/ /*13*/
	3, /*00001110*/ /*14*/
	4, /*00001111*/ /*15*/
	1, /*00010000*/ /*16*/
	2, /*00010001*/ /*17*/
	2, /*00010010*/ /*18*/
	3, /*00010011*/ /*19*/
	2, /*00010100*/ /*20*/
	3, /*00010101*/ /*21*/
	3, /*00010110*/ /*22*/
	4, /*00010111*/ /*23*/
	2, /*00011000*/ /*24*/
	3, /*00011001*/ /*25*/
	3, /*00011010*/ /*26*/
	4, /*00011011*/ /*27*/
	3, /*00011100*/ /*28*/
	4, /*00011101*/ /*29*/
	4, /*00011110*/ /*30*/
	5, /*00011111*/ /*31*/
	1, /*00100000*/ /*32*/
	2, /*00100001*/ /*33*/
	2, /*00100010*/ /*34*/
	3, /*00100011*/ /*35*/
	2, /*00100100*/ /*36*/
	3, /*00100101*/ /*37*/
	3, /*00100110*/ /*38*/
	4, /*00100111*/ /*39*/
	2, /*00101000*/ /*40*/
	3, /*00101001*/ /*41*/
	3, /*00101010*/ /*42*/
	4, /*00101011*/ /*43*/
	3, /*00101100*/ /*44*/
	4, /*00101101*/ /*45*/
	4, /*00101110*/ /*46*/
	5, /*00101111*/ /*47*/
	2, /*00110000*/ /*48*/
	3, /*00110001*/ /*49*/
	3, /*00110010*/ /*50*/
	4, /*00110011*/ /*51*/
	3, /*00110100*/ /*52*/
	4, /*00110101*/ /*53*/
	4, /*00110110*/ /*54*/
	5, /*00110111*/ /*55*/
	3, /*00111000*/ /*56*/
	4, /*00111001*/ /*57*/
	4, /*00111010*/ /*58*/
	5, /*00111011*/ /*59*/
	4, /*00111100*/ /*60*/
	5, /*00111101*/ /*61*/
	5, /*00111110*/ /*62*/
	6, /*00111111*/ /*63*/
	1, /*01000000*/ /*64*/
	2, /*01000001*/ /*65*/
	2, /*01000010*/ /*66*/
	3, /*01000011*/ /*67*/
	2, /*01000100*/ /*68*/
	3, /*01000101*/ /*69*/
	3, /*01000110*/ /*70*/
	4, /*01000111*/ /*71*/
	2, /*01001000*/ /*72*/
	3, /*01001001*/ /*73*/
	3, /*01001010*/ /*74*/
	4, /*01001011*/ /*75*/
	3, /*01001100*/ /*76*/
	4, /*01001101*/ /*77*/
	4, /*01001110*/ /*78*/
	5, /*01001111*/ /*79*/
	2, /*01010000*/ /*80*/
	3, /*01010001*/ /*81*/
	3, /*01010010*/ /*82*/
	4, /*01010011*/ /*83*/
	3, /*01010100*/ /*84*/
	4, /*01010101*/ /*85*/
	4, /*01010110*/ /*86*/
	5, /*01010111*/ /*87*/
	3, /*01011000*/ /*88*/
	4, /*01011001*/ /*89*/
	4, /*01011010*/ /*90*/
	5, /*01011011*/ /*91*/
	4, /*01011100*/ /*92*/
	5, /*01011101*/ /*93*/
	5, /*01011110*/ /*94*/
	6, /*01011111*/ /*95*/
	2, /*01100000*/ /*96*/
	3, /*01100001*/ /*97*/
	3, /*01100010*/ /*98*/
	4, /*01100011*/ /*99*/
	3, /*01100100*/ /*100*/
	4, /*01100101*/ /*101*/
	4, /*01100110*/ /*102*/
	5, /*01100111*/ /*103*/
	3, /*01101000*/ /*104*/
	4, /*01101001*/ /*105*/
	4, /*01101010*/ /*106*/
	5, /*01101011*/ /*107*/
	4, /*01101100*/ /*108*/
	5, /*01101101*/ /*109*/
	5, /*01101110*/ /*110*/
	6, /*01101111*/ /*111*/
	3, /*01110000*/ /*112*/
	4, /*01110001*/ /*113*/
	4, /*01110010*/ /*114*/
	5, /*01110011*/ /*115*/
	4, /*01110100*/ /*116*/
	5, /*01110101*/ /*117*/
	5, /*01110110*/ /*118*/
	6, /*01110111*/ /*119*/
	4, /*01111000*/ /*120*/
	5, /*01111001*/ /*121*/
	5, /*01111010*/ /*122*/
	6, /*01111011*/ /*123*/
	5, /*01111100*/ /*124*/
	6, /*01111101*/ /*125*/
	6, /*01111110*/ /*126*/
	7, /*01111111*/ /*127*/
	1, /*10000000*/ /*128*/
	2, /*10000001*/ /*129*/
	2, /*10000010*/ /*130*/
	3, /*10000011*/ /*131*/
	2, /*10000100*/ /*132*/
	3, /*10000101*/ /*133*/
	3, /*10000110*/ /*134*/
	4, /*10000111*/ /*135*/
	2, /*10001000*/ /*136*/
	3, /*10001001*/ /*137*/
	3, /*10001010*/ /*138*/
	4, /*10001011*/ /*139*/
	3, /*10001100*/ /*140*/
	4, /*10001101*/ /*141*/
	4, /*10001110*/ /*142*/
	5, /*10001111*/ /*143*/
	2, /*10010000*/ /*144*/
	3, /*10010001*/ /*145*/
	3, /*10010010*/ /*146*/
	4, /*10010011*/ /*147*/
	3, /*10010100*/ /*148*/
	4, /*10010101*/ /*149*/
	4, /*10010110*/ /*150*/
	5, /*10010111*/ /*151*/
	3, /*10011000*/ /*152*/
	4, /*10011001*/ /*153*/
	4, /*10011010*/ /*154*/
	5, /*10011011*/ /*155*/
	4, /*10011100*/ /*156*/
	5, /*10011101*/ /*157*/
	5, /*10011110*/ /*158*/
	6, /*10011111*/ /*159*/
	2, /*10100000*/ /*160*/
	3, /*10100001*/ /*161*/
	3, /*10100010*/ /*162*/
	4, /*10100011*/ /*163*/
	3, /*10100100*/ /*164*/
	4, /*10100101*/ /*165*/
	4, /*10100110*/ /*166*/
	5, /*10100111*/ /*167*/
	3, /*10101000*/ /*168*/
	4, /*10101001*/ /*169*/
	4, /*10101010*/ /*170*/
	5, /*10101011*/ /*171*/
	4, /*10101100*/ /*172*/
	5, /*10101101*/ /*173*/
	5, /*10101110*/ /*174*/
	6, /*10101111*/ /*175*/
	3, /*10110000*/ /*176*/
	4, /*10110001*/ /*177*/
	4, /*10110010*/ /*178*/
	5, /*10110011*/ /*179*/
	4, /*10110100*/ /*180*/
	5, /*10110101*/ /*181*/
	5, /*10110110*/ /*182*/
	6, /*10110111*/ /*183*/
	4, /*10111000*/ /*184*/
	5, /*10111001*/ /*185*/
	5, /*10111010*/ /*186*/
	6, /*10111011*/ /*187*/
	5, /*10111100*/ /*188*/
	6, /*10111101*/ /*189*/
	6, /*10111110*/ /*190*/
	7, /*10111111*/ /*191*/
	2, /*11000000*/ /*192*/
	3, /*11000001*/ /*193*/
	3, /*11000010*/ /*194*/
	4, /*11000011*/ /*195*/
	3, /*11000100*/ /*196*/
	4, /*11000101*/ /*197*/
	4, /*11000110*/ /*198*/
	5, /*11000111*/ /*199*/
	3, /*11001000*/ /*200*/
	4, /*11001001*/ /*201*/
	4, /*11001010*/ /*202*/
	5, /*11001011*/ /*203*/
	4, /*11001100*/ /*204*/
	5, /*11001101*/ /*205*/
	5, /*11001110*/ /*206*/
	6, /*11001111*/ /*207*/
	3, /*11010000*/ /*208*/
	4, /*11010001*/ /*209*/
	4, /*11010010*/ /*210*/
	5, /*11010011*/ /*211*/
	4, /*11010100*/ /*212*/
	5, /*11010101*/ /*213*/
	5, /*11010110*/ /*214*/
	6, /*11010111*/ /*215*/
	4, /*11011000*/ /*216*/
	5, /*11011001*/ /*217*/
	5, /*11011010*/ /*218*/
	6, /*11011011*/ /*219*/
	5, /*11011100*/ /*220*/
	6, /*11011101*/ /*221*/
	6, /*11011110*/ /*222*/
	7, /*11011111*/ /*223*/
	3, /*11100000*/ /*224*/
	4, /*11100001*/ /*225*/
	4, /*11100010*/ /*226*/
	5, /*11100011*/ /*227*/
	4, /*11100100*/ /*228*/
	5, /*11100101*/ /*229*/
	5, /*11100110*/ /*230*/
	6, /*11100111*/ /*231*/
	4, /*11101000*/ /*232*/
	5, /*11101001*/ /*233*/
	5, /*11101010*/ /*234*/
	6, /*11101011*/ /*235*/
	5, /*11101100*/ /*236*/
	6, /*11101101*/ /*237*/
	6, /*11101110*/ /*238*/
	7, /*11101111*/ /*239*/
	4, /*11110000*/ /*240*/
	5, /*11110001*/ /*241*/
	5, /*11110010*/ /*242*/
	6, /*11110011*/ /*243*/
	5, /*11110100*/ /*244*/
	6, /*11110101*/ /*245*/
	6, /*11110110*/ /*246*/
	7, /*11110111*/ /*247*/
	5, /*11111000*/ /*248*/
	6, /*11111001*/ /*249*/
	6, /*11111010*/ /*250*/
	7, /*11111011*/ /*251*/
	6, /*11111100*/ /*252*/
	7, /*11111101*/ /*253*/
	7, /*11111110*/ /*254*/
	8 /*11111111*/ /*255*/
};

//int count_ones(unsigned int x) {
//    int result = 0;
//    while (x != 0)
//        result++, x = x & (x-1);
//    return result;
//}

 /* (this code assumes that 'int' is 32-bits wide) */
 int count_ones(unsigned int x) {
	 unsigned int x_8 = x>>8;
	 unsigned int x_16 = x>>16;
	 unsigned int x_24 = x>>24;

	//return bits_set[x & 255] + bits_set[x_8 & 255]
 //   + bits_set[x_16 & 255] + bits_set[x_24 & 255];

	return bits_set[x & 0x000000FF] + bits_set[(x & 0x0000FF00)>>8]
    + bits_set[(x & 0x00FF0000)>>16] + bits_set[(x & 0xFF000000)>>24];

    //return bits_set[ x        & 255] + bits_set[(x >>  8) & 255]
    //     + bits_set[(x >> 16) & 255] + bits_set[(x >> 24) & 255];
}

 //int count_ones(int num)
 //{
	//int i, snum, res, count = 0;

	///*
 //    * Check each bit whether the bit is set or unset
 //    * Uses >> and & operator for checking individual bits
 //    */
 //   for (i = 0 ; i < 32 ; i++)
 //   {
 //       snum = num >> i;
 //       res = snum & 1;
 //       if (res == 1)
 //           count++;
 //   }

	//return count;
 //}

//int count_ones(unsigned int i)
//{
//    i = i - ((i >> 1) & 0x55555555);
//    i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
//    return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
//}


 //int fibunachi(int index)
 //{
	// if (index==0) return 0;
	// if (index==1) return 1;

	// if (index >= 2)
	// {
	//	return fibunachi(index-1)+fibunachi(index-2);
	// }
 //}

 int fibunachi(int index)
 {
	 int result;
	 int former_1 = 0;
	 int former_2 = 1;

	 if (index==0) result = 0;
	 else if (index==1) result = 1;
	 else
	 {
		 for (int i=1 ; i<index ; i++)
		 {
			 result = former_1 + former_2;
			 former_1 = former_2;
			 former_2 = result;
		 }
	 }

	 return result;

 }

//unsigned int reverse(unsigned int x)
//{
//	unsigned int x_0xaaaaaaaa = x & 0xaaaaaaaa;
//	unsigned int x_0x55555555 = x & 0x55555555;
//	x = ((x_0xaaaaaaaa >> 1) | (x_0x55555555 << 1));
//
//	unsigned int x_0xcccccccc = x & 0xcccccccc;
//	unsigned int x_0x33333333 = x & 0x33333333;
//    x = ((x_0xcccccccc >> 2) | (x_0x33333333 << 2));
//
//	unsigned int x_0xf0f0f0f0 = x & 0xf0f0f0f0;
//	unsigned int x_0x0f0f0f0f = x & 0x0f0f0f0f;
//    x = ((x_0xf0f0f0f0 >> 4) | (x_0x0f0f0f0f << 4));
//
//	unsigned int x_0xff00ff00 = x & 0xff00ff00;
//	unsigned int x_0x00ff00ff = x & 0x00ff00ff;
//    x = ((x_0xff00ff00 >> 8) | (x_0x00ff00ff << 8));
//
//
//    //x = (((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1));
//    //x = (((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2));
//    //x = (((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4));
//    //x = (((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8));
//
//
//    
//	return((x >> 16) | (x << 16));
//}


 unsigned int reverse(unsigned int x)
{
	unsigned int y = 0;
	int i;
	int bit;

	for (i=0 ; i<32 ; i++)
	{
		bit = (x >> i) & 1;
		y= (y<<1) + bit;
	}


    return y;
	
}

 int leading_zero_count(int num)
 {
	 int count = 0;
	 int bit;
	 int i;

	 for (i=0 ; i<32 ; i++)
	 {
		 bit = num & 0x80000000;
		 num = num << 1;
		 

		 if (bit==0) count++;
		 else return count;
	 }

	 return count;
 }

unsigned int next_largest_power_of_2(unsigned int x)
{

	//cout << "x = " << x << endl;
 //       x |= (x >> 1);
 //       x |= (x >> 2);
 //       x |= (x >> 4);
 //       x |= (x >> 8);
 //       x |= (x >> 16);

	//	cout << "next largest power of 2 = " << x+1 << endl;
 //       return(x+1);



	cout << "x = " << x << endl;
	int i;
	int bit;
	int msb;

	if (count_ones(x) == 1) return x;

	for (i=0 ; i<32 ; i++)
	{
		bit = x & 0x80000000;
		if (bit==0x80000000)
		{
			msb = 32 - i;
			break;
		}
		x = x << 1;
	}

	int y=1;
	y = y << msb;
	cout << "next largest power of 2 = " << y << endl;
	return y;

}

int calc_num_of_floors(int num)
{
	if (num<3) return num;
	return calc_num_of_floors(num-1)+calc_num_of_floors(num-2);
}
 
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int result;
	int value_to_search = 9;

	int x=4;
	int y=8;

	int num = 513;
	//int num_of_ones = count_ones(num);

	//cout << "num of ones in the number " << num << " is: " << num_of_ones << endl;

	int num_of_floors = 4;
	cout << "building of " << num_of_floors << " floors: " << calc_num_of_floors(num_of_floors) << " options " << endl; 

	//int fibunachi_index = 6;
	//int fibunachi_value;

	//for (int fib_i=0 ; fib_i < 20 ; fib_i++)
	//{
	//	fibunachi_value = fibunachi(fib_i);
	//	cout << fibunachi_value << ", ";
	//}
	//cout << endl;



	//unsigned int original_num = 0x000000F1;
	//unsigned int reverse_num = reverse(original_num);

	////cout << "reverse bits of " << original_num << " is: " << reverse_num << endl;
	//printf("reverse bits of 0x%X is 0x%X\n", original_num, reverse_num);

	
	//int num_to_calc_leading_zeros = 0x07FFFFFF;
	//int leadint_zero_num = leading_zero_count(num_to_calc_leading_zeros);

	////cout << "num of leading zeros in num " << num_to_calc_leading_zeros << " is: " << leadint_zero_num << endl;
	//printf("num of leading zeros in num 0x%08X is %d\n", num_to_calc_leading_zeros, leadint_zero_num);

	//next_largest_power_of_2(17);



	



	//swap(x,y);

	//cout << "x = " << x << ", y = " << y << endl;

	//result = binary_search(arr, 10, value_to_search);


	//cout << "the value " << value_to_search << " is in index " << result << endl;


	// wait until user is ready before terminating program
    // to allow the user to see the program results
    system("PAUSE");
 	return 0;       
}